# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

# # Use config.yml values for some configuration.
# require 'yaml'
# unless File.exist?("../../ansible/group_vars/all.yml")
#   raise 'Configuration file not found! Please copy vars.example.yml to vars.yml and try again.'
# end
# vconfig = YAML.load_file("../../ansible/group_vars/all.yml")

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "bento/ubuntu-18.04"
  config.ssh.insert_key = false
  config.vm.provider "virtualbox"

  config.vm.provider :virtualbox do |v|
    v.memory = 1024
    v.cpus = 1
    v.linked_clone = true
    v.customize ['modifyvm', :id, '--audio', 'none']
  end

  # Define four VMs with static private IP addresses.
  boxes = [
    { :name => "k3s-master-a", :ip => "192.168.88.200" },
    { :name => "k3s-worker-node-a", :ip => "192.168.88.201" },
    { :name => "k3s-worker-node-b", :ip => "192.168.88.202" },
    { :name => "k3s-storage-node-a", :ip => "192.168.88.203" }
  ]

  # Configure each of the VMs.
  boxes.each_with_index do |opts, index|
    config.vm.define opts[:name] do |config|
      config.vm.hostname = opts[:name]
      config.vm.network :private_network, ip: opts[:ip]

      # Provision all the VMs using Ansible after last VM is up.
      if index == boxes.size - 1
        config.vm.provision "ansible" do |ansible|
          ansible.compatibility_mode = "2.0"
          ansible.playbook = "../../ansible/bootstrap.yml"
          ansible.inventory_path = "hosts.yml"
          ansible.limit = "all"
        end
      end
    end
  end
end
